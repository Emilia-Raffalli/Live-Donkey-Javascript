// Challenge13 : football app
// On va cr√©er une app de paris foot !

// Supposons que nous r√©cup√©rons les donn√©es d‚Äôun service web √† propos d‚Äôun certain jeu (variable ‚Äògame‚Äô dans le code en dessous). Dans ce challenge, on va travailler avec ces donn√©es.

// üèÅ Exercice 1
// T√¢ches :
// Cr√©er un tableau de joueurs pour chaque √©quipe (variables ‚Äòplayers1‚Äô et ‚Äòplayers2‚Äô).
// Le premier joueur dans un tableau de joueurs est le gardien et les autres sont des joueurs de terrain. Pour l‚Äô√©quipe 1 (le Bayern de Munich), cr√©er une variable ‚Äògk‚Äô avec le nom du gardien et un tableau ‚ÄòfieldPlayers‚Äô avec le reste des joueurs de l‚Äô√©quipe.
// Cr√©er un tableau ‚ÄòallPlayers‚Äô qui contient les joueurs de chaque √©quipe (22 joueurs).
// Pendant le match, le Bayern utilise 3 joueurs rempla√ßants. Cr√©er un autre tableau ‚Äòplayers1Final‚Äô contenant tous les joueurs de l‚Äô√©quipe originelle ainsi que ‚ÄòThiago‚Äô ‚ÄòCoutinho‚Äô et ‚ÄòPerisic‚Äô.
// Bas√© sur l‚Äôobjet game.odds, cr√©er une variable pour chaque probabilit√© (appel√©s ‚Äòteam1‚Äô, ‚Äòdraw‚Äô et ‚Äòteam2‚Äô).
// √âcrire une fonction ‚ÄòprintGoals‚Äô qui prends un nombre arbitraire de joueurs et qui √©crit chacun d‚Äôeux dans la console , ainsi que le nombre total de buts.
// L‚Äô√©quipe avec la probabilit√© la plus basse est celle la plus susceptible de gagner. √âcrire dans la console quelle √©quipe a le plus de chance de gagner.


// üèÅ Exercice 2
// T√¢ches :
// Faire une boucle sur le tableau game.scored et afficher dans la console chaque nom de butteur ainsi que le num√©ro du but : (Exemple : ‚ÄúBut 1 : Lewanoski‚Äù).
// Faire une boucle qui calcule la moyenne des probabilit√©s et l‚Äô√©crire dans la console.
// Afficher les 2 probabilit√©s dans la console, mais dans un joli format comme ceci :
// Probabilit√© de victoire pour Bayern Munich : 1,33
// Probabilit√© d‚Äô√©galit√© : 3,25
// Probabilit√© de victoire de Borussia Dortmund : 6,5
// Bien r√©cup√©rer les noms des √©quipes depuis l‚Äôobjet ‚Äògame‚Äô, ne pas les ‚Äúhardcoder‚Äù.
// Cr√©er un objet appel√© ‚Äòscorers‚Äô qui contient le nom des joueurs qui ont marqu√© en propri√©t√© et le nombre de buts qu‚Äôils ont marqu√© en value. Exemple :


// //üèÅ Exercice 3
// Cette fois-ci, nous avons un tableau √† 2 dimensions appel√© ‚ÄògameEvents‚Äô (voir en dessous) avec le log de tous les √©v√®nements qui se sont pass√©s pendant le match. La premi√®re case d‚Äôun sous-tableau correspond √† la minute de l‚Äô√©v√®nement, la 2√®me case correspond au type d‚Äô√©v√®nement.

// T√¢ches :
// Cr√©er un tableau ‚Äòevents‚Äô des diff√©rents √©v√®nements qui se sont d√©roul√©s (pas de doublon !).
// Apr√®s que le jeux soit fini, on a d√©cid√© que le carton jaune de la minute 64 n‚Äô√©tait pas juste, Le supprimer du log d‚Äô√©v√®nements.
// Calculer et afficher ce texte dans la console : ‚ÄúUn √©v√®nement est apparu en moyenne toutes les 9 minutes‚Äù. (Un jeu de foot dure 90 minutes).
// Faire une boucle sur ‚ÄògameEvents‚Äô et afficher pour chaque √©l√©ment dans la console s‚Äôil s‚Äôest d√©roul√© dans la premi√®re ou deuxi√®me moiti√© du jeu :
// [PREMI√àRE MOITI√â] 17 . ‚öΩÔ∏è GOAL



const game = {
    team1: 'Bayern Munich',
    team2: 'Borrussia Dortmund',
    players: [
    ['Neuer','Pavard','Martinez','Alaba','Davies','Kimmich','Goretzka','Coman','Muller','Gnarby','Lewandowski',],
    ['Burki','Schulz','Hummels','Akanji','Hakimi','Weigl','Witsel','Hazard','Brandt','Sancho','Gotze',],
],
score: '4:0',
scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
date: 'Nov 9th, 2037',
odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
},
};


// EXERCICE 1


players1 = game.players[0];
game.gk1 = game.players[0][0];
players2 = game.players[1];
game.gk2 = game.players[1][0];
game.fieldPlayers1 = game.players[0].slice(1);
game.fieldPlayers2 = game.players[1].slice(1);
game.allPlayers = [players1,...players2];
game.playersFinal = [players1,'Thiago', 'Coutinho', 'Perisic'];

console.log(game);


team1 = game.odds.team1;
team2 = game.odds.team2;
draw = game.odds.x;


//Je cr√©√© une fonction qui calcule le nombre de fois qu'un joueur est cit√© dans le tableau 'scored', ce qui correspond au nombre de fois qu'il a marqu√© dans la partie.
function countOccurrence(array, target) { 
    return array.reduce(function(count, element) {
        if (element === target) {
            return count + 1;
        } else {
            return count;
        }
    }, 0);
}

// Cr√©ation de la fonction printGoals, qui traite les joueurs saisis en argument, et qui dit : pour chacun des joueurs pass√©s en argument, applique la fonction pr√©c√©dente, qui determine le nombre de but marqu√© dans la partie. si le nombre de but est sup√©rieur √† 1 affiche le nom du joueur et son nombre de buts, sinon affiche n'a pas marqu√©.
function printGoals(...players) {
    players.forEach(function(player) {
        const nbGoals = countOccurrence(game.scored, player);
        if (nbGoals > 1) {
            console.log(`${player} a marqu√© ${nbGoals} buts.`);
        } else {
            console.log(`${player} n'a pas marqu√©.`);
        }
    });
}

printGoals('Pavard','Lewandowski','Alaba','Davies','Kimmich','Goretzka');


if (team1 < team2) {
    console.log(`L'√©quipe ${game.team1} a le plus de chance de ganger face √† l'√©quipe ${game.team2}.`)
} else if (team1 > team2){
    console.log(`L'√©quipe ${game.team2} a le plus de chance de ganger face √† l'√©quipe ${game.team1}.`)
} else {
    console.log(`Les deux √©quipes ${game.team1} et ${game.team2} ont les m√™mes chances de gagner.`)
}





// EXERCICE 2 

for ( let i = 0 ; i < game.scored.length ; i ++) {
    console.log (`But ${i+1} : ${game.scored[i]}`);
};

let averageProbabilities = (team1 + team2 + draw) / 3;
console.log (`La moyenne des probabilit√©s pour le match est de ${averageProbabilities.toFixed(2)}.`);


arrayOdds = [team1, team2, draw];
console.log(arrayOdds);

let sumOdds = 0 ; 
for (let i = 0; i < arrayOdds.length; i++) {
    sumOdds = sumOdds + arrayOdds[i];
}

let averageOdds = sumOdds / arrayOdds.length;
console.log(`La moyenne des probabilit√©s est de ${averageOdds.toFixed(2)}.`);


console.log(`Probabilit√© de victoire pour ${game.team1} : ${team1}.`);
console.log(`Probabilit√© d'√©galit√© : ${draw}.`);
console.log(`Probabilit√© de victoire pour ${game.team2} : ${team2}.`);



let scorers = {};

game.scored.forEach(player => {     // Je fais une boucle sur les joueurs du tableau game.scored

    if (scorers.hasOwnProperty(player)) {
        scorers[player] += 1;  // Si la prorpi√©t√© avec le nom du joueur (pass√© dans le tableau scored) existe d√©j√†, j'incr√©mente d'un pour un but de plus.
    } else {
        scorers[player] = 1;   // Sinon, si la propri√©t√© avec le nom du joueur n'existe pas d√©j√†, je passe le lnombre de but √† un (pour un but.)
    }
});

console.log(scorers);



// EXERCICE 3 


const gameEvents = [
    [17, "‚öΩ GOAL"],
    [36, "üîÅ Substitution"],
    [47, "‚öΩ GOAL"],
    [61, "üîÅ Substitution"],
    [64, "üü® Yellow card"],
    [69, "üü• Red card"],
    [70, "üîÅ Substitution"],
    [72, "üîÅ Substitution"],
    [76, "‚öΩ GOAL"],
    [80, "‚öΩ GOAL"],
    [92, "üü® Yellow card"],
];



const events = Array.from(new Set(gameEvents.map((event) => event[1])));
console.log(events);

events.splice(2,1);
console.log(events);



const eventsTime = Array.from(new Set(gameEvents.map((time)=> time[0])));
console.log(eventsTime);


let avergaegeTime = 90 / eventsTime.length;
console.log(`Un √©v√®nement est apparu en moyenne toutes les ${avergaegeTime.toFixed(2)} minutes.`);


gameEvents.forEach(event => {
    let eventTime = event[0];
    let eventType = event[1];

    if(eventTime <= 45 ) {
        console.log(`L'√©venement ${eventType} s'est d√©roul√© en premi√®re partie du match.`)
    } else {
        console.log(`L'√©venement ${eventType} s'est d√©roul√© en seconde partie du match.`);
    }
});
